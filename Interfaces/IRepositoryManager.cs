using System;
using System.Collections.Generic;
using Backend.Entities.Models;

namespace Backend.Services;

public interface IRepositoryManager
{
    User getUserByEmail(string email);
    User getUserById(long userID);
    User getUserByCompany(long companyID);
    void addUser(User user);
    void addProfilePicture(ProfilePicture profilePicture);
    void removeProfilePicture(ProfilePicture profilePicture);
    ProfilePicture getProfilePictureById(long userID);
    string getProfilePicture(long userID);
    Company getCompany(long companyID);
    Branch getBranch(long branchID);
    List<Company> getCompanies();
    List<User> getSellersByBranch(long branchID);
    List<User> getSellersByCompany(long companyID);
    List<Branch> getBranchesByCompany(long companyID);
    void addCompany(Company company);
    void addBranch(Branch branch);
    void removeBranch(Branch branch);
    void removeCompany(Company company);
    Vehicle getVehicleById(long vehicleID);
    long addVehicle(Vehicle vehicle);
    int getRemainingListings(long userID);
    Boolean isAvailable(long vehicleID);
    Boolean isFavorite(long vehicleID, long userID);
    Promoted getPromotedByVehicleId(long vehicleID);
    void addPromoted(Promoted promoted);
    void addFavorites(Favorites favorite);
    Favorites getFavorite(long vehicleID, long userID);
    void removeFavorite(Favorites favorite);
    Country getCountry(long countryID);
    void removeFavorites(List<Favorites> favorites);
    List<Vehicle> getAllListings();
    Vehicle getListing(long vehicleID);
    List<Vehicle> getUserListings(long userID);
    void addMake(Make make);
    int getTotalListings();
    List<VehicleImage> getListingPhotos(long listingID);
    List<VehicleColor> getColors();
    List<FuelType> GetFuelTypes();
    List<Country> getCountries();
    List<VehicleType> getTypes();
    List<Make> getMakes();
    void addSale(Sale sale);
    Sale getSaleByVehicle(long vehicleID);
    VehicleImage getVehicleImage(long listingID, int order);
    void addVehicleImage(VehicleImage image);
    List<Favorites> getFavoritesByVehicle(long vehicleID);
    List<Model> getModels(long makeID);
    void removeModels(List<Model> models);
    void removeModel(Model model);
    void removePromoted(Promoted promoted);
    void removeVehicle(Vehicle vehicle);
    void removeVehicleImage(VehicleImage image);
    List<Promoted> getNotPromoted();
    List<Promoted> getPromoted();
    void addModel(Model model);
    VehicleColor getVehicleColor(long vehicleColorID);
    FuelType getFuelType(long fuelTypeID);
    VehicleType getVehicleType(long vehicleTypeID);
    void removeMake(Make make);
    Model getModel(long makeID, string name);
    Model getModel(long modelID);
    Make getMakeByName(string name);
    Make getMakeById(long makeID);
    List<Favorites> getFavoritesByUser(long userID);
    Boolean makeHasListings(long makeID);
    Boolean modelHasListing(long modelID);
}