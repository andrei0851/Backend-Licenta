// <auto-generated />
using System;
using Backend.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Backend.Migrations
{
    [DbContext(typeof(BackendContext))]
    partial class BackendContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Backend.Entities.Models.Branch", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("CompanyID")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyID");

                    b.ToTable("Branches");
                });

            modelBuilder.Entity("Backend.Entities.Models.Company", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("companyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("Backend.Entities.Models.Country", b =>
                {
                    b.Property<long>("countryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("countryID"), 1L, 1);

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("countryID");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            countryID = 1L,
                            name = "England"
                        },
                        new
                        {
                            countryID = 2L,
                            name = "Austria"
                        },
                        new
                        {
                            countryID = 3L,
                            name = "Belgium"
                        },
                        new
                        {
                            countryID = 4L,
                            name = "Bulgaria"
                        },
                        new
                        {
                            countryID = 5L,
                            name = "Canada"
                        },
                        new
                        {
                            countryID = 6L,
                            name = "Czech Republic"
                        },
                        new
                        {
                            countryID = 7L,
                            name = "Croatia"
                        },
                        new
                        {
                            countryID = 8L,
                            name = "Denmark"
                        },
                        new
                        {
                            countryID = 9L,
                            name = "Estonia"
                        },
                        new
                        {
                            countryID = 10L,
                            name = "Finland"
                        },
                        new
                        {
                            countryID = 11L,
                            name = "France"
                        },
                        new
                        {
                            countryID = 12L,
                            name = "Germany"
                        },
                        new
                        {
                            countryID = 13L,
                            name = "Greece"
                        },
                        new
                        {
                            countryID = 14L,
                            name = "Ireland"
                        },
                        new
                        {
                            countryID = 15L,
                            name = "Italy"
                        },
                        new
                        {
                            countryID = 16L,
                            name = "Japan"
                        },
                        new
                        {
                            countryID = 17L,
                            name = "Luxembourg"
                        },
                        new
                        {
                            countryID = 18L,
                            name = "Norvegia"
                        },
                        new
                        {
                            countryID = 19L,
                            name = "Holland"
                        },
                        new
                        {
                            countryID = 20L,
                            name = "Poland"
                        },
                        new
                        {
                            countryID = 21L,
                            name = "Romania"
                        },
                        new
                        {
                            countryID = 22L,
                            name = "Russia"
                        },
                        new
                        {
                            countryID = 23L,
                            name = "Slovacia"
                        },
                        new
                        {
                            countryID = 24L,
                            name = "Slovenia"
                        },
                        new
                        {
                            countryID = 25L,
                            name = "Spain"
                        },
                        new
                        {
                            countryID = 26L,
                            name = "USA"
                        },
                        new
                        {
                            countryID = 27L,
                            name = "Sweden"
                        },
                        new
                        {
                            countryID = 28L,
                            name = "Turkey"
                        },
                        new
                        {
                            countryID = 29L,
                            name = "Ukraine"
                        },
                        new
                        {
                            countryID = 30L,
                            name = "Hungary"
                        },
                        new
                        {
                            countryID = 31L,
                            name = "Portugal"
                        },
                        new
                        {
                            countryID = 32L,
                            name = "China"
                        },
                        new
                        {
                            countryID = 33L,
                            name = "South Koreea"
                        },
                        new
                        {
                            countryID = 34L,
                            name = "India"
                        },
                        new
                        {
                            countryID = 35L,
                            name = "Australia"
                        },
                        new
                        {
                            countryID = 36L,
                            name = "Mexico"
                        },
                        new
                        {
                            countryID = 37L,
                            name = "Brasil"
                        },
                        new
                        {
                            countryID = 38L,
                            name = "Argentina"
                        },
                        new
                        {
                            countryID = 39L,
                            name = "Iceland"
                        },
                        new
                        {
                            countryID = 40L,
                            name = "Lithuania"
                        },
                        new
                        {
                            countryID = 41L,
                            name = "Lativa"
                        },
                        new
                        {
                            countryID = 42L,
                            name = "Other"
                        });
                });

            modelBuilder.Entity("Backend.Entities.Models.Favorites", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("VehicleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("VehicleId");

                    b.ToTable("Favorites");
                });

            modelBuilder.Entity("Backend.Entities.Models.FuelType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("fuel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FuelType");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            fuel = "Diesel"
                        },
                        new
                        {
                            Id = 2L,
                            fuel = "Petrol"
                        },
                        new
                        {
                            Id = 3L,
                            fuel = "Petrol + LPG"
                        },
                        new
                        {
                            Id = 4L,
                            fuel = "Hybrid"
                        },
                        new
                        {
                            Id = 5L,
                            fuel = "Electric"
                        },
                        new
                        {
                            Id = 6L,
                            fuel = "Hydrogen"
                        });
                });

            modelBuilder.Entity("Backend.Entities.Models.Make", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Makes");
                });

            modelBuilder.Entity("Backend.Entities.Models.Model", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("makeID")
                        .HasColumnType("bigint");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("makeID");

                    b.ToTable("Models");
                });

            modelBuilder.Entity("Backend.Entities.Models.ProfilePicture", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("UserID")
                        .HasColumnType("bigint");

                    b.Property<string>("imgLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserID")
                        .IsUnique();

                    b.ToTable("ProfilePictures");
                });

            modelBuilder.Entity("Backend.Entities.Models.Promoted", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("isPromoted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("promotedUntil")
                        .HasColumnType("datetime2");

                    b.Property<long>("vehicleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("vehicleId");

                    b.ToTable("Promoted");
                });

            modelBuilder.Entity("Backend.Entities.Models.Sale", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("buyerID")
                        .HasColumnType("bigint");

                    b.Property<float>("finalprice")
                        .HasColumnType("real");

                    b.Property<string>("proofOfPay")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("vehicleID")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("buyerID");

                    b.HasIndex("vehicleID");

                    b.ToTable("Sales");
                });

            modelBuilder.Entity("Backend.Entities.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phonenumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("availableListings")
                        .HasColumnType("int");

                    b.Property<long?>("branchID")
                        .HasColumnType("bigint");

                    b.Property<string>("clientURI")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("companyID")
                        .HasColumnType("bigint");

                    b.Property<bool>("isConfirmed")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("branchID");

                    b.HasIndex("companyID")
                        .IsUnique()
                        .HasFilter("[companyID] IS NOT NULL");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Email = "andrei_2008118@yahoo.com",
                            Firstname = "Andrei",
                            Lastname = "Lupu",
                            PasswordHash = "$2a$11$ZimoVKD9wZ9B65V3FUn65uS2L1b8VrR.17H.3VLW35RgR4E0oipIW",
                            Phonenumber = "+40745575094",
                            Role = "Admin",
                            availableListings = 0,
                            isConfirmed = true
                        });
                });

            modelBuilder.Entity("Backend.Entities.Models.Vehicle", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("UserID")
                        .HasColumnType("bigint");

                    b.Property<string>("VIN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("active")
                        .HasColumnType("bit");

                    b.Property<long>("cc")
                        .HasColumnType("bigint");

                    b.Property<string>("color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("condition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("countryID")
                        .HasColumnType("bigint");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("firstImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("fuel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("fuelTypeId")
                        .HasColumnType("bigint");

                    b.Property<int>("km")
                        .HasColumnType("int");

                    b.Property<string>("make")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("makeID")
                        .HasColumnType("bigint");

                    b.Property<int>("manufactureYear")
                        .HasColumnType("int");

                    b.Property<string>("model")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("modelID")
                        .HasColumnType("bigint");

                    b.Property<string>("postDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("power")
                        .HasColumnType("bigint");

                    b.Property<float>("price")
                        .HasColumnType("real");

                    b.Property<string>("type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("user")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("vehicleColorId")
                        .HasColumnType("bigint");

                    b.Property<long>("vehicleTypeId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserID");

                    b.HasIndex("makeID");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("Backend.Entities.Models.VehicleColor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("VehicleColor");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            color = "Black"
                        },
                        new
                        {
                            Id = 2L,
                            color = "White"
                        },
                        new
                        {
                            Id = 3L,
                            color = "Blue"
                        },
                        new
                        {
                            Id = 4L,
                            color = "Green"
                        },
                        new
                        {
                            Id = 5L,
                            color = "Grey"
                        },
                        new
                        {
                            Id = 6L,
                            color = "Red"
                        },
                        new
                        {
                            Id = 7L,
                            color = "Brown"
                        },
                        new
                        {
                            Id = 8L,
                            color = "Silver"
                        },
                        new
                        {
                            Id = 9L,
                            color = "Orange"
                        },
                        new
                        {
                            Id = 10L,
                            color = "Yellow"
                        },
                        new
                        {
                            Id = 11L,
                            color = "Burgundy"
                        },
                        new
                        {
                            Id = 12L,
                            color = "Other"
                        });
                });

            modelBuilder.Entity("Backend.Entities.Models.VehicleImage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("filename")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("imageURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("order")
                        .HasColumnType("int");

                    b.Property<long>("vehicleID")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("vehicleID");

                    b.ToTable("VehicleImages");
                });

            modelBuilder.Entity("Backend.Entities.Models.VehicleType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("VehicleType");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            type = "Saloon"
                        },
                        new
                        {
                            Id = 2L,
                            type = "Estate"
                        },
                        new
                        {
                            Id = 3L,
                            type = "Hatchback"
                        },
                        new
                        {
                            Id = 4L,
                            type = "SUV"
                        },
                        new
                        {
                            Id = 5L,
                            type = "Van"
                        },
                        new
                        {
                            Id = 6L,
                            type = "Pick-up Truck"
                        },
                        new
                        {
                            Id = 7L,
                            type = "Cabrio"
                        });
                });

            modelBuilder.Entity("Backend.Entities.Models.Branch", b =>
                {
                    b.HasOne("Backend.Entities.Models.Company", "company")
                        .WithMany("branches")
                        .HasForeignKey("CompanyID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("company");
                });

            modelBuilder.Entity("Backend.Entities.Models.Favorites", b =>
                {
                    b.HasOne("Backend.Entities.Models.User", "user")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Backend.Entities.Models.Vehicle", "vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("user");

                    b.Navigation("vehicle");
                });

            modelBuilder.Entity("Backend.Entities.Models.Model", b =>
                {
                    b.HasOne("Backend.Entities.Models.Make", "make")
                        .WithMany("models")
                        .HasForeignKey("makeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("make");
                });

            modelBuilder.Entity("Backend.Entities.Models.ProfilePicture", b =>
                {
                    b.HasOne("Backend.Entities.Models.User", "user")
                        .WithOne("profilepicture")
                        .HasForeignKey("Backend.Entities.Models.ProfilePicture", "UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("Backend.Entities.Models.Promoted", b =>
                {
                    b.HasOne("Backend.Entities.Models.Vehicle", "vehicle")
                        .WithMany()
                        .HasForeignKey("vehicleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("vehicle");
                });

            modelBuilder.Entity("Backend.Entities.Models.Sale", b =>
                {
                    b.HasOne("Backend.Entities.Models.User", "buyer")
                        .WithMany()
                        .HasForeignKey("buyerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Backend.Entities.Models.Vehicle", "vehicle")
                        .WithMany()
                        .HasForeignKey("vehicleID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("buyer");

                    b.Navigation("vehicle");
                });

            modelBuilder.Entity("Backend.Entities.Models.User", b =>
                {
                    b.HasOne("Backend.Entities.Models.Branch", "branch")
                        .WithMany()
                        .HasForeignKey("branchID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Backend.Entities.Models.Company", "company")
                        .WithOne("owner")
                        .HasForeignKey("Backend.Entities.Models.User", "companyID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("branch");

                    b.Navigation("company");
                });

            modelBuilder.Entity("Backend.Entities.Models.Vehicle", b =>
                {
                    b.HasOne("Backend.Entities.Models.User", null)
                        .WithMany("Vehicles")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Backend.Entities.Models.Make", null)
                        .WithMany("vehicles")
                        .HasForeignKey("makeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Entities.Models.VehicleImage", b =>
                {
                    b.HasOne("Backend.Entities.Models.Vehicle", "vehicle")
                        .WithMany()
                        .HasForeignKey("vehicleID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("vehicle");
                });

            modelBuilder.Entity("Backend.Entities.Models.Company", b =>
                {
                    b.Navigation("branches");

                    b.Navigation("owner")
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Entities.Models.Make", b =>
                {
                    b.Navigation("models");

                    b.Navigation("vehicles");
                });

            modelBuilder.Entity("Backend.Entities.Models.User", b =>
                {
                    b.Navigation("Vehicles");

                    b.Navigation("profilepicture");
                });
#pragma warning restore 612, 618
        }
    }
}
